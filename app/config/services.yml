# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests,Exception}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']


    # makes classes in src/Reservation available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Reservation\HotelBundle\:
        resource: '../../src/Reservation/HotelBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/Reservation/HotelBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    Reservation\HotelBundle\Controller\:
        resource: '../../src/Reservation/HotelBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    Common\LocationBundle\:
        resource: '../../src/Common/LocationBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/Common/LocationBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    Common\LocationBundle\Controller\:
        resource: '../../src/Common/LocationBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    Common\RegionBundle\:
        resource: '../../src/Common/RegionBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/Common/RegionBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    Common\RegionBundle\Controller\:
        resource: '../../src/Common/RegionBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    Common\BookingBundle\:
        resource: '../../src/Common/BookingBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/Common/BookingBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
        # and have a tag that allows actions to type-hint services
    Reservation\CartBundle\Controller\:
        resource: '../../src/Reservation/CartBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    Reservation\CartBundle\:
        resource: '../../src/Reservation/CartBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/Reservation/CartBundle/{Entity,Repository,Tests}'


    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    Common\BookingBundle\Controller\:
        resource: '../../src/Common/BookingBundle/Controller'
        public: true
        tags: ['controller.service_arguments']



    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    data_fixture.alice:
        class: AppBundle\DataFixtures\ORM\LoadFixtures
        tags: [doctrine.fixture.orm]

    Reservation\HotelBundle\HotelManager\HotelManager: ~

    Reservation\HotelBundle\HotelManager\RoomManager: ~

    Common\LocationBundle\Manager\LocationManager: ~

    Common\RegionBundle\Manager\RegionManager: ~

    Common\BookingBundle\Manager\BookingManager: ~

    Common\BookingBundle\Manager\BillManager: ~

    Reservation\CartBundle\EventListener\CheckoutListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }
    redirect.after_login:
        class: UserBundle\Redirection\AfterLoginRedirection

    stripe_client:
          class: Reservation\CartBundle\StripeClient
          arguments: ['%stripe_secret_key%']


    twig.extension.intl:
        class: Twig_Extensions_Extension_Text
        tags:
            - { name: twig.extension }
